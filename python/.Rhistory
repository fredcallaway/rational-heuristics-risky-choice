infert.mod3 <- glm(case ~ induced*age + spontaneous*age, family=binomial, data=infert)
summary(infert.mod3)
anova(infert.mod,infert.mod3)
ftable(x1 <- xtabs(~ below + above, data=infert))
infert$age.group[infert$age<=medAge]='below'
infert$age.group[infert$age>medAge]='above'
ftable(x1 <- xtabs(~ below + above, data=infert))
ftable(x1 <- xtabs(~ below + above, data=infert$age.group))
ftable(x1 <- xtabs(~ below + above, data=infert$age))
ftable(x1 <- xtabs(~ below + above, data=infert$age.group))
ftable(x1 <- xtabs(~ below, data=infert$age.group))
ftable(x1 <- xtabs(~ below, data=infert$age))
ftable(x1 <- xtabs(~ below, data=infert))
ftable(x1 <- xtabs(~ below, data=infert$age))
ftable(x1 <- xtabs(~ below, data=infert$age.group))
ftable(x1 <- xtabs(~ below + above, data=infert$age.group))
infert$age
infert
ftable(x1 <- xtabs(~ below + above, data=infert$age.group))
ftable(x1 <- xtabs(~ below, data=infert$age.group))
ftable(x1 <- xtabs(~ 'below', data=infert$age.group))
ftable(x1 <- xtabs('below', data=infert$age.group))
infert
infert$age
infert$age.group
ftable(x1 <- xtabs(~ "below", data=infert$age.group))
ftable(x1 <- xtabs(~ age.group, data=infert$age.group))
ftable(x1 <- xtabs(~ age.group, data=infert))
ftable(x1 <- xtabs(~ age.group, data=infert))
?anova
?Anova
??Anova
?anova
?aov
?anova
recorders <- data.frame("X"=c(0,0,1,1), "Y" = c(0,1,1,0), row.names=c("A", "B","C","D"))
locs <- data.frame("X"=c(.3,.5),"Y"=c(.8,.2))
intensities <- data.frame("sine"=sin(0:99*(pi/10))+1.2,
"cosine"= .7*cos(0:99*(pi/15))+.9)
dists <- matrix(nrow=dim(locs)[1], ncol=dim(recorders)[1],
dimnames <- list(NULL, row.names(recorders)))
dimnames
for (i in 1:dim(dists)[2]) {
dists[,i]=sqrt((locs$X-recorders$X[i])^2 + (locs$Y-recorders$Y[i])^2)
}
recorded.data <- data.frame(as.matrix(intensities)%*%
matrix(data=exp(-2*as.numeric(dists)), nrow=dim(locs)[1], ncol=dim(recorders)[1]))
recorded.data <- as.data.frame(apply(recorded.data,2,FUN=function(x)
{sdx=sd(x, na.rm=TRUE);
noise=rnorm(length(x),0,sdx/10);
return(x+noise)}
))
plot(recorded.data)
round(cor(recorded.data),2)
plot.ts(recorded.data)
Xoriginal<-t(as.matrix(recorded.data))
rm<-rowMeans(Xoriginal)
X<-Xoriginal-matrix(rep(rm, dim(Xoriginal)[2]), nrow=dim(Xoriginal)[1])
A<-X %*% t(X)
E<-eigen(A,TRUE)
P<-t(E$vectors)
newdata <- P %*% X
sdev <- sqrt(diag((1/(dim(X)[2]-1)* P %*% A %*% t(P))))
(sqrt(E$values)/sqrt(dim(X)[2]-1))
pr=prcomp(recorded.data)
pr
plot(pr)
barplot(pr$sdev/pr$sdev[1])
pr2=prcomp(recorded.data, tol=.1)
plot.ts(pr2$x)  # x are the coefficients of the pca
plot.ts(intensities)    #how do they compare to the int?
plot.ts(recorded.data)  #how do they compare to the recorded data?
od=pr$x %*% t(pr$rotation)
od2=pr2$x %*% t(pr2$rotation)
plot.ts(od)
plot.ts(od2)
library(fastICA)
a <- fastICA(recorded.data, 2, alg.typ = "parallel", fun = "logcosh", alpha = 1,
method = "C", row.norm = FALSE, maxit = 200,
tol = 0.0001, verbose = TRUE)
plot.ts(a$S)
library(MASS)
Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
Sp = rep(c("s","c","v"), rep(50,3)))
train <- sample(1:150, 75)
table(Iris$Sp[train])
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
z
plot(z)
predict(z, Iris[-train, ])$class
Iris$Sp[-train]
head(biopsy)
biopsy = na.omit(biopsy)
n = nrow(biopsy)
ntest = round(0.80 * n) #80% of data
train = sample(1:n, ntest)
(biopsy.lda)
biopsy.lda <- lda(class ~ V1 + V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9, data=biopsy, subset=train)
(biopsy.lda)
biopsy.predicted = predict(biopsy.lda, biopsy[-train,2:10])
biopsy.actual = biopsy$class[-train]
(sum(biopsy.predicted$class == 'malignant'))/n
(sum(biopsy.predicted$class == 'benign'))/n
(sum(biopsy.actual == 'malignant'))/n
(sum(biopsy.actual == 'benign'))/n
(sum(biopsy.predicted$class == 'malignant' & biopsy.actual == 'benign'))/n
ldahist(biopsy[,2:10],biopsy[,11])
(sum(biopsy.predicted$class == 'malignant' & biopsy.actual == 'benign'))/n
malignant<-(sum(pred$class == 'malignant' & biopsy.actual == 'malignant'))
malignant<-(sum(predicted$class == 'malignant' & biopsy.actual == 'malignant'))
malignant<-(sum(biopsy.predicted$class == 'malignant' & biopsy.actual == 'malignant'))
benign<-(sum(biopsy.predicted$class == 'benign' & biopsy.actual == 'benign'))
(malignant+benign)/n #percent correct
n
options(show.signif.stars=FALSE)
library(car)
head(Davis) # first 6 rows
nrow(Davis)
scatterplot(weight ~ repwt, data=Davis, smooth=FALSE, id.n=1)
davis.mod <- lm(weight ~ repwt, data=Davis)
davis.mod
summary(davis.mod)
attach(Davis)
idxgood <- (!is.na(weight)) & (!is.na(repwt))
mw <- mean(weight[idxgood])  # The mean weight
mrw <- mean(repwt[idxgood])  # The mean reported weight
b <- sum((repwt[idxgood]-mrw)*(weight[idxgood]-mw))/sum((repwt[idxgood]-mrw)^2)
a <- mw - b*mrw
detach(Davis)
confint(davis.mod)
davis.mod.2 <- update(davis.mod, subset=-12)
summary(davis.mod.2)
cbind(Original=coef(davis.mod), NoCase12=coef(davis.mod.2))
head(Prestige)
nrow(Prestige)
# THis is a short tutorial to introduce us to logistic regression
# Exercise 1.  Try to make figure 5.1 in R.  Notice that figure 5.1 are inverse link functions or mean kernel functions.
# THis is a short tutorial to introduce us to logistic regression
# Exercise 1.  Try to make figure 5.1 in R.  Notice that figure 5.1 are inverse link functions or mean kernel functions.
# Hint: you will have to use the help menu to find functions to calculate the probit
x <- seq(-5,5,by=0.1)
ylogit <- 1/(1+exp(-x))
ylogfunction<- function(x) 1/(1+exp(-x))
plot(x,ylogit, type='l') xlab=expression(eta(x)), ylab=expression(mu(x)))
library(VGAM)
yprobit <- probit(x, inverse=TRUE)
lines(x,yprobit,lty='dashed')
yclog <- cloglog(x, inverse=TRUE)
lines(x, yclog, lty='dotdash')
legend('topleft',c('logit','probit','cloglog'),lty=c(1,2,4))
# We are now going to do the first example in the book.
# Get rid of stars, set seed and load library
options(show.signif.stars=FALSE)
set.seed(100) # to reproduce results in the text
library(car)
# The example uses data on married womens work force participation
# Let's lookd at the data. lfp is the binary variable. k5 is the number of children < 5 and k618 childre 6 to 18. wc wife college, lwg log of wife wage
some(Mroz)  # sample 10 rows
# What is the sample size?
nrow(Mroz)
# We are now fitting the generalized linear model.  The logit link is the default link function
mroz.mod <- glm(lfp ~ k5 + k618 + age + wc + hc + lwg + inc,
family=binomial, data=Mroz)
summary(mroz.mod)
# We are calculating the exponents of the coefficients
round(exp(cbind(Estimate=coef(mroz.mod), confint(mroz.mod))), 2)
# Exercise 2.  What is the effect of having one additional child who is less than 6 years old?
# it reduces the odds of working by 77%!
# We are now going to compare two models - with and without the participation of children
mroz.mod.2 <- update(mroz.mod, . ~ . - k5 - k618)
anova(mroz.mod.2, mroz.mod, test="Chisq")
anova(mroz.mod.2, mroz.mod)
# The Anova command in car performs a type II test
# THis is a short tutorial to introduce us to logistic regression
# Exercise 1.  Try to make figure 5.1 in R.  Notice that figure 5.1 are inverse link functions or mean kernel functions.
# Hint: you will have to use the help menu to find functions to calculate the probit
x <- seq(-5,5,by=0.1)
ylogit <- 1/(1+exp(-x))
ylogfunction<- function(x) 1/(1+exp(-x))
plot(x,ylogit, type='l') xlab=expression(eta(x)), ylab=expression(mu(x)))
library(VGAM)
yprobit <- probit(x, inverse=TRUE)
lines(x,yprobit,lty='dashed')
yclog <- cloglog(x, inverse=TRUE)
lines(x, yclog, lty='dotdash')
legend('topleft',c('logit','probit','cloglog'),lty=c(1,2,4))
# We are now going to do the first example in the book.
# Get rid of stars, set seed and load library
options(show.signif.stars=FALSE)
set.seed(100) # to reproduce results in the text
library(car)
# The example uses data on married womens work force participation
# Let's lookd at the data. lfp is the binary variable. k5 is the number of children < 5 and k618 childre 6 to 18. wc wife college, lwg log of wife wage
some(Mroz)  # sample 10 rows
# What is the sample size?
nrow(Mroz)
# We are now fitting the generalized linear model.  The logit link is the default link function
mroz.mod <- glm(lfp ~ k5 + k618 + age + wc + hc + lwg + inc,
family=binomial, data=Mroz)
summary(mroz.mod)
# We are calculating the exponents of the coefficients
round(exp(cbind(Estimate=coef(mroz.mod), confint(mroz.mod))), 2)
# Exercise 2.  What is the effect of having one additional child who is less than 6 years old?
# it reduces the odds of working by 77%!
# We are now going to compare two models - with and without the participation of children
mroz.mod.2 <- update(mroz.mod, . ~ . - k5 - k618)
anova(mroz.mod.2, mroz.mod, test="Chisq")
anova(mroz.mod.2, mroz.mod)
# The Anova command in car performs a type II test
Anova(mroz.mod)
mroz.mod.2
Anova(mroz.mod)
library(BB)
library(BB)
install.packages("BB")
library(BB)
payoff <- matrix(data = c(14, 6, 0, 7), nrow=2, byrow = TRUE)
get.phi <- function(data) { ### discount factor over time - how heavily you weight recent experience - phi = rho with self-tuning (self-tuning paper)
c
get.phi <- function(data) { ### discount factor over time - how heavily you weight recent experience - phi = rho with self-tuning (self-tuning paper)
n <- nrow(data)
r.right <- data$OtherChoice
r.left <- 1 - r.right
h.left <- cumsum(r.left) / seq(n)
h.right <- cumsum(r.right) / seq(n)
S <- (h.left - r.left)^2 + (h.right - r.right)^2
phi <- 1 - 0.5 * S
return(phi)
}
debugSource('~/Desktop/stats_project/EWA/EWA_mle19.R')
starts
l.both
View(data)
source('~/Desktop/stats_project/EWA/EWA_mle19.R')
?multiStart
?list
?return
View(d.green)
data
data$SID
data[data$SID==1]
sids
sids[1]
floor(.2*80)
x
x.sep
debugSource('~/Desktop/stats_project/EWA/EWA_mle19.R')
preds.both = predict(x, validation.set)
?predict
library(nimble)
.libPaths()
library(nimble)
install.packages("igraph")
library(nimble)
library(nimble)
gamma(1,.1)
gamma(1)
gam(1,.1)
library(nimble)
dbeta(0,2,2)
install.packages('nimble', repos = 'https://cran.cnr.berkeley.edu')
install.packages("nimble", repos = "http://r-nimble.org", type = "source")
library(nimble)
install.packages('nimble', repos = 'http://cran.cnr.berkeley.edu')
library(nimble)
library(nimble)
install.packages("nimble", repos = "http://r-nimble.org", type = "source")
library(nimble)
get(method, envir = home)
source('~/.active-rstudio-document')
pwd
dat <- read.csv("/Users/paulkrueger/Desktop/strategy-discovery-master/python/data/human/1.0/trials.pkl')")
dat <- read.csv("/Users/paulkrueger/Desktop/strategy-discovery-master/python/data/human/1.0/trials.csv")
dat
print(dat)
hdp <- within(dat, {
Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
DID <- factor(DID)
HID <- factor(HID)
CancerStage <- factor(CancerStage)
})
mod <- glmer(strategy ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
mod <- glmer(strategy ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
# hdp <- within(dat, {
#   Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
#   DID <- factor(DID)
#   HID <- factor(HID)
#   CancerStage <- factor(CancerStage)
# })
library(lme-4)
# hdp <- within(dat, {
#   Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
#   DID <- factor(DID)
#   HID <- factor(HID)
#   CancerStage <- factor(CancerStage)
# })
library(lme4)
print(mod)
mod <- glmer(strategy ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
print(mod)
mod2 <- glmer(strategy ~ sigma + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
print(mod2)
print(mod.summary)
print(mod.summary())
summary(mod)
summary(s1)
s6 <- glmer(other ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
s6 <- glmer(Other ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(mod)
summ(mod)
hdp <- read.csv("https://stats.idre.ucla.edu/stat/data/hdp.csv")
hdp <- read.csv("https://stats.idre.ucla.edu/stat/data/hdp.csv")
hdp
hdp.remission
R.home(component = "home")
R --version
version
system("type R")
R.home()
version
dat
summary(s1)
s1 <- glmer(TTB_SAT ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(s6)
# hdp <- within(dat, {
#   Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
#   DID <- factor(DID)
#   HID <- factor(HID)
#   CancerStage <- factor(CancerStage)
# })
library(lme4)
summary(s1)
summ(s1)
s1 <- glmer(TTB_SAT ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(s1)
summ(s1)
summary(s2)
# s3 <- glmer(TTB ~ sigma + alpha + cost + (1 | pid),
summary(s2)
s1 <- glmer(TTB_SAT ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
# s1 <- glmer(TTB_SAT ~ sigma + alpha + cost + (1 | pid),
#              data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#              nAGQ = 10)
s2 <- glmer(SAT_TTB ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(s2)
# s1 <- glmer(TTB_SAT ~ sigma + alpha + cost + (1 | pid),
#              data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#              nAGQ = 10)
# s2 <- glmer(SAT_TTB ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
s3 <- glmer(TTB ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(s3)
summary(s4)
# s1 <- glmer(TTB_SAT ~ sigma + alpha + cost + (1 | pid),
#              data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#              nAGQ = 10)
# s2 <- glmer(SAT_TTB ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
# s3 <- glmer(TTB ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
s4 <- glmer(WADD ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(s4)
#              nAGQ = 10)
# s2 <- glmer(SAT_TTB ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
# s3 <- glmer(TTB ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
# s4 <- glmer(WADD ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
s5 <- glmer(Rand ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(s5)
#             nAGQ = 10)
# s3 <- glmer(TTB ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
# s4 <- glmer(WADD ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
# s5 <- glmer(Rand ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
s6 <- glmer(Other ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(s6)
summary(s2)
summary(s1)
summary(s2)
summary(s3)
summary(s4)
summary(s5)
summary(s1)
summary(s3)
summary(s2)
s1_s <- standardize(s1)
#             nAGQ = 10)
# s3 <- glmer(TTB ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
# s4 <- glmer(WADD ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
# s5 <- glmer(Rand ~ sigma + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
s6 <- glmer(Other ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
library(lme4)
# hdp <- within(dat, {
#   Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
#   DID <- factor(DID)
#   HID <- factor(HID)
#   CancerStage <- factor(CancerStage)
# })
library(lme4)
summary(s6)
s1 <- glmer(TTB_SAT ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(s1)
a + alpha + cost + (1 | pid),
#             data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#             nAGQ = 10)
# s1 <- glmer(TTB_SAT ~ sigma + alpha + cost + (1 | pid),
#              data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#              nAGQ = 10)
s2 <- glmer(SAT_TTB ~ sigma + alpha + cost + (1 | pid), data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"), nAGQ = 10)
summary(s2)
s1 <- glmer(TTB_SAT ~ sigma + alpha + cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
summary(s1)
mean(dat$TTB_SAT)
mean(dat[TTB_SAT])
dat[TTB_SAT]
dat['TTB_SAT']
mean(dat['TTB_SAT'])
39,419.96+1
39419.96+6976.56+133790.71+20062.36+38226.58
ls
dat[Other] <- (dat$Other-mean(dat$Other))/sd(dat$Other)
# hdp <- within(dat, {
#   Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
#   DID <- factor(DID)
#   HID <- factor(HID)
#   CancerStage <- factor(CancerStage)
# })
library(lme4)
s2
dat <- read.csv("../data/human/1.0/processed/trials.csv")
# hdp <- within(dat, {
#   Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
#   DID <- factor(DID)
#   HID <- factor(HID)
#   CancerStage <- factor(CancerStage)
# })
library(lme4)
setwd("~/Desktop/rational-heuristics-risky-choice/python")
# s1 <- glmer(TTB_SAT ~ R_sigma + R_alpha + R_cost + (1 | pid),
#              data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#              nAGQ = 10)
s2 <- glmer(R_SAT_TTB ~ R_sigma + R_alpha + R_cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
sink(file = '../stats/exp1/R_SAT_TTB.txt')
# s1 <- glmer(TTB_SAT ~ R_sigma + R_alpha + R_cost + (1 | pid),
#              data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
#              nAGQ = 10)
s2 <- glmer(R_SAT_TTB ~ R_sigma + R_alpha + R_cost + (1 | pid),
data = dat, family = binomial, control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
dat <- read.csv("../data/human/1.0/processed/trials.csv")
# hdp <- within(dat, {
#   Married <- factor(Married, levels = 0:1, labels = c("no", "yes"))
#   DID <- factor(DID)
#   HID <- factor(HID)
#   CancerStage <- factor(CancerStage)
# })
library(lme4)
